generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  clerkId String @unique

  name   String
  email  String  @unique
  avatar String?
  role   String  @default("User")
  status String  @default("Pending")
  phone  String?

  employee Employee?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([role])
  @@index([status])
  @@index([createdAt])
  @@index([name])
  @@index([role, status])
  @@index([status, createdAt])
  @@index([role, createdAt])
}

model Brand {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  status      String  @default("Pending")

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([status, createdAt])
}

model Category {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  name        String  @unique
  description String?
  status      String  @default("Pending")

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([status])
  @@index([createdAt])
  @@index([status, createdAt])
}

model Product {
  id            String  @id @default(auto()) @map("_id") @db.ObjectId
  productCode   String  @unique
  name          String
  description   String?
  price         Int
  stock         Int
  discountPrice Int?
  status        String  @default("Active")

  brandId String @db.ObjectId
  brand   Brand  @relation(fields: [brandId], references: [id], onDelete: NoAction)

  categoryId String   @db.ObjectId
  category   Category @relation(fields: [categoryId], references: [id], onDelete: NoAction)

  orderItems    OrderItem[]
  outgoingItems OutgoingItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([brandId])
  @@index([categoryId])
  @@index([status])
  @@index([price])
  @@index([stock])
  @@index([createdAt])
  @@index([name])
  @@index([brandId, status])
  @@index([categoryId, status])
  @@index([status, createdAt])
  @@index([price, status])
  @@index([stock, status])
  @@index([brandId, categoryId])
  @@index([status, price])
  @@index([status, stock])
}

model Employee {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  phone   String
  avatar  String?
  nid     String?
  address String
  status  String  @default("Active")

  userId String @unique @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  orders Order[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  outgoings  Outgoing[]

  @@index([status])
  @@index([createdAt])
  @@index([name])
  @@index([phone])
  @@index([status, createdAt])
  @@index([status, name])
}

model Shop {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  name    String
  address String
  phone   String?

  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([name])
  @@index([createdAt])
  @@index([phone])
}

model Order {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  total  Int
  due    Int?
  status String @default("Pending")

  shopId String @db.ObjectId
  shop   Shop   @relation(fields: [shopId], references: [id], onDelete: NoAction)

  employeeId String   @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction)

  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([shopId])
  @@index([employeeId])
  @@index([status])
  @@index([createdAt])
  @@index([total])
  @@index([due])
  @@index([shopId, status])
  @@index([employeeId, status])
  @@index([shopId, createdAt])
  @@index([status, createdAt])
  @@index([employeeId, createdAt])
  @@index([status, total])
  @@index([shopId, status, createdAt])
  @@index([employeeId, status, createdAt])
}

model OrderItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  price    Int
  quantity Int
  total    Int

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction)

  orderId String @db.ObjectId
  Order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@index([createdAt])
  @@index([quantity])
  @@index([total])
  @@index([orderId, productId])
  @@index([productId, createdAt])
  @@index([orderId, createdAt])
  @@index([productId, quantity])
  @@index([orderId, total])
}

model Sale {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int
  total    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@index([quantity])
  @@index([total])
  @@index([createdAt, total])
  @@index([createdAt, quantity])
}

model Outgoing {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  total Int

  employeeId String   @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id], onDelete: NoAction)

  items OutgoingItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OutgoingItem {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  quantity Int

  outgoingId String   @db.ObjectId
  outgoing   Outgoing @relation(fields: [outgoingId], references: [id], onDelete: NoAction)

  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
